apiVersion: v1
kind: Secret
metadata:
  name: default-certificate-secret
  namespace: ingress-nginx
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYzakNDQk1hZ0F3SUJBZ0lVS3p2ZE1JYTRTU01TV0NSRGlROWllWlR2YWZJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2N6RUxNQWtHQTFVRUJoTUNVMHd4R2pBWUJnTlZCQWdNRVZOdmRYUm9aWEp1SUZCeWIzWnBibU5sTVE0dwpEQVlEVlFRSERBVkhZV3hzWlRFTk1Bc0dBMVVFQ2d3RWFtTnRkekVSTUE4R0ExVUVDd3dJYW1OdGR5NWpiMjB4CkZqQVVCZ05WQkFNTURTb3VZVzB1ZDNOdk1pNWpiMjB3SGhjTk1qVXdOekF6TURReE1UVXdXaGNOTXpVd056QXgKTURReE1UVXdXakJ6TVFzd0NRWURWUVFHRXdKVFRERWFNQmdHQTFVRUNBd1JVMjkxZEdobGNtNGdVSEp2ZG1sdQpZMlV4RGpBTUJnTlZCQWNNQlVkaGJHeGxNUTB3Q3dZRFZRUUtEQVJxWTIxM01SRXdEd1lEVlFRTERBaHFZMjEzCkxtTnZiVEVXTUJRR0ExVUVBd3dOS2k1aGJTNTNjMjh5TG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNZk5mdkR4eGpLTitlbjlyS2VhdlZPOWw5L2Ftc05MbnZUYU9aa2tPdGRNR0pKYgpFZmtVU2pEbXdtQlVtVE1QeGp3K3dJOGUwTzNiRUVSaEFvSGFMWFZnZWlnWjhROFFUemoyVERVTk13WW0wbS8rCmRZcEs1UDFBUkpYeE9hTy95ajIzRGFnOFFFY2svOEhTdnZGSXpLNHdkWmlWMlViL1IxYUR4OUF4cTY1bngvK2oKNmM5TkQ0ZE5UYXF1MlhFTUY5NzYxaGJyN0g1bXpzMWlMNWNIektqUnA3NVBRQVJNL2hOSFVsYUFiSzFrRW5PTApZemdoZHV1NnVFdHN6emE2aklXaGI4aXlvbFR1M29JMXRHVDZEOUZLNzRsOUVJaXhxRWg0NHk4NVBZQ2JSWk83ClFKaUt2eDFzZjZqVllsUis2Qm80Zm9SZjV5ZHNZTzdQL1JlMS8yTUNBd0VBQWFPQ0FtZ3dnZ0prTUlJQ05BWUQKVlIwUkJJSUNLekNDQWllQ0RTb3VZVzB1ZDNOdk1pNWpiMjJDR1dGdVlXeDVkR2xqY3k1a1l6RXVZVzB1ZDNOdgpNaTVqYjIyQ0dXRnVZV3g1ZEdsamN5NWtZekl1WVcwdWQzTnZNaTVqYjIyQ0hHTnZiblJ5YjJ4d2JHRnVaUzVrCll6RXVZVzB1ZDNOdk1pNWpiMjJDSEdOdmJuUnliMnh3YkdGdVpTNWtZekl1WVcwdWQzTnZNaTVqYjIyQ0YyZGgKZEdWM1lYa3VaR014TG1GdExuZHpiekl1WTI5dGdoZG5ZWFJsZDJGNUxtUmpNaTVoYlM1M2MyOHlMbU52YllJYQpkM011WjJGMFpYZGhlUzVrWXpFdVlXMHVkM052TWk1amIyMkNHM2R6Y3k1bllYUmxkMkY1TG1Sak1pNWhiUzUzCmMyOHlMbU52YllJZmRISmhabVpwWXk1dFlXNWhaMlZ5TG1Sak1TNWhiUzUzYzI4eUxtTnZiWUlmZEhKaFptWnAKWXk1dFlXNWhaMlZ5TG1Sak1pNWhiUzUzYzI4eUxtTnZiWUliYTJWNUxtMWhibUZuWlhJdVpHTXhMbUZ0TG5kegpiekl1WTI5dGdodHJaWGt1YldGdVlXZGxjaTVrWXpJdVlXMHVkM052TWk1amIyMkNHQ3BoYlMxamIyNTBjbTlzCmNHeGhibVV0YzJWeWRtbGpaWUlUS21GdExXZGhkR1YzWVhrdGMyVnlkbWxqWllJT0ttRnRMV3R0TFhObGNuWnAKWTJXQ0dTcGhiUzEwYlMweExXbHVkR1Z5Ym1Gc0xYTmxjblpwWTJXQ0dTcGhiUzEwYlMweUxXbHVkR1Z5Ym1GcwpMWE5sY25acFkyV0NIeXBoYlMxaGJtRnNlWFJwWTNNdFpHRnphR0p2WVhKa0xYTmxjblpwWTJXQ0hDcGhiUzFoCmJtRnNlWFJwWTNNdGQyOXlhMlZ5TFhObGNuWnBZMldDQ1d4dlkyRnNhRzl6ZERBTEJnTlZIUThFQkFNQ0JQQXcKSFFZRFZSME9CQllFRkRRVCtaL1NKeDBsWS9sc240Q0ZEOXlKeWJzeE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQgpBUUJ4bmpxcVRieTB3YmhwVElYQ3JEdnFTUGxwWU5NWXpEYVlsc3NPTWpQN1RReTg0N2hmZ0lmRDdQM29FdXdkCjE1ZjRzR0Q2YnhicWtFQ0IyeFZpZVI3d2xUeE5UNGVDZWI5eFVpc2RDMHRzQXc2L0VxcnRKTFR5WldieWJaemwKbU1KOUFzSFVNYjRqdVJiNEJTV1hybWNSR2lLd2JPQm9OWmZkNzU1UjBtUHlRODBjR3dNM0dicWQ3RVp6OE9WcwpDay9EdEdFWUlQOW51UmVadkVWbGZLRFhIdDdxT3hsMk1pRnBNYkNqdWQrdnJEZzdxaUZSbEZIYi90QTRid3lNClpRTGNObEExWUx1eHg4UjY3Z1VNR2JHcVBKUVBFNTVVVWlnM0N0V0tsS0xjSzJXUUxFayt0Zlo3RDUrc1cxUVgKdlVWbHpwY0ZVRHN0L05lTEhGZjJuZnFPCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREh6WDd3OGNZeWpmbnAKL2F5bm1yMVR2WmZmMnByRFM1NzAyam1aSkRyWFRCaVNXeEg1RkVvdzVzSmdWSmt6RDhZOFBzQ1BIdER0MnhCRQpZUUtCMmkxMVlIb29HZkVQRUU4NDlrdzFEVE1HSnRKdi9uV0tTdVQ5UUVTVjhUbWp2OG85dHcyb1BFQkhKUC9CCjByN3hTTXl1TUhXWWxkbEcvMGRXZzhmUU1hdXVaOGYvbytuUFRRK0hUVTJxcnRseERCZmUrdFlXNit4K1pzN04KWWkrWEI4eW8wYWUrVDBBRVRQNFRSMUpXZ0d5dFpCSnppMk00SVhicnVyaExiTTgydW95Rm9XL0lzcUpVN3Q2QwpOYlJrK2cvUlN1K0pmUkNJc2FoSWVPTXZPVDJBbTBXVHUwQ1lpcjhkYkgrbzFXSlVmdWdhT0g2RVgrY25iR0R1CnovMFh0ZjlqQWdNQkFBRUNnZ0VBUG11dVZXTUxXdjd0RFZPeHJYa1QzZ1lVM1J3a0RwQmcvRGp6RnF0eGNKSzIKK0g1WUtwdFNwRjFyYTRIeWpMZklaRWpzaXFvRGR0UGlES0xNRURwVHltQldPWklGTkFJUjVnZFlmcGg5a05YdgpGNHNGT0t1MlI0SmRDd1VlVDFDYlE5V2RBQ3Eyb0NOb2ZhcXorWmlYVFhJWlF3N0puenNnaytBK3ZBWFFqMzhTClltemdhQ3d5TU9aVEpSK3R2Vm1mUk1tbTJ3RUxqdEl3UmtHKzJiMk5HUE01dFN4QjUyejIvVDd3UDNmeDlVNngKMmp5Y3VKVHRueTc4aTJQa3R2MFdzZWhaY1dsOGExQmcxRmZ6NVBNNTJyMFc0cHhmUHBaclZkMGh4MW1STFFVRQpIRW9KaHM0OUpxMWx3TWZBelg4bHZpdTgreHFib2ZReVp3U3NpK3lQUFFLQmdRRHByRFY4d05xR1p3bjZ3dWV1CkVmR2pZclpNS1d1UjhxdVFrV2orMC9lTWs3OXVsN1RsRTZ3dkVBSUF0czJLTW1QOU1mOTg0Rkc0eDdIRUdKMk8KVW5pZnphR2tsaG1nRG0xOWh1OVg1Rm83NFhZMkVscXpEeStOVDkvOXZVaGNvL3hnblJZSXh3SHNvVVlHU2pVOApQNmkrbGI5dThSY3hPZmM5WlZEYkJmSkFod0tCZ1FEYTVNMzhLYnA3VHdHdjJZaGFzS29heC8weTl3WWdXQ2lDClBaK2ozSjhmT1RWR1FXM3BQUVo3RXpuWTJ1Uzhpc2l0dkQrbUNTdDFaUk42bDZUSTFmc3NFU3FWQkcrcGtxV3AKYXI2NDBPSENzZlZ6VWF2RUx4bEVBb05JVFpoNUdnS0FNZkRTWjkyQ0M3QXYzRFAyWU1IdzlmZFMrR3d1QWxDMwo1SnVOYW01TlJRS0JnRFZUWTNGdzRXM0NuZmhuK2s4ek1SM0VMUzM4VmR3Y3NTSnd6TEU2MWtkeWdFRlF4YXR4CmJkM2ZuVlZrWWt1amJFWWYzdG8wcHZHd1FOVXJlT2s5ME9GSElCaGJXTVc2QlNxY1hJcUdSa0ZjRm9vSWJrSm0KdU1kYTd4Y00xekt0Q2E5U3FmQ2UyY1dTbUZSZkl2NzQyQjJHTndXdVowaUluZStZNjNiUVNKU0pBb0dBUzBLaQpCQkpBMk1hNFdNTGRXL2tqODJOUmppVmF5T0ltdzJqMnEzdGVobmkvOVhEbm5tcnFBSVVDdmFtOVBZb21KMzN6CkVGNVV2OTlKekR1NVg0Z2EvUExHQmtocE1BK0l2L0JBdFFDMHJxRkxPQ1FiZjYrRjYxbEYxQ1ZCeUZtR0JKZW4KS21DbHkySERhU0U0Q0gwS0VaUXdQaW5GNENmUm92aUo5eHhoNGxVQ2dZRUF2Zit1ampXSUVYcnFaUTZ2RWJQbAo4bEo2WHJTUVRqdHYzR3hpbm9QSWtWb3ExL0ZhNGM4aXNPZW02dlVLb2V3cm0xZ2dsaDJwWndQS2J2VHk3c2RMCmdNRFlFSjZMM1gxcmFISE1uZVRVdnoxTm0zM1c4dnVSS2FUMDNtQnRhc2kwdWdWRzJzODBBK0x4VVZ6azRBd0MKcktYRXkyZmFESTF4VkVrNmUyblhPbUE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

# For this, you can generate either keys with passwords or without passwords. Having password-protected keys is relevant
# even if we are adding the content of the keys. If password-protected keys are generated need to push the unprotected
# version of the privatekey as follows :
#  1. Generate the key: openssl genpkey -algorithm RSA -out private.key -aes256 -pkeyopt rsa_keygen_bits:2048
#  2. Generate the certificate: openssl req -x509 -days 365 -key private.key -out certificate.crt \
#                               -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                               -extensions v3_req -config <(echo "[req]"; \
#                               echo distinguished_name=req; \
#                               echo "[v3_req]"; \
#                               echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:controlplane.am.wso2.com,DNS:gateway.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com"; \
#                               echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment")
#  3. Generate keystore if required: openssl pkcs12 -export -in certificate.crt -inkey private.key -out keystore.p12 -name wso2carbon
#                                    keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore wso2carbon.jks -deststoretype JKS
#                                    keytool -export -keystore wso2carbon.jks -alias wso2carbon -file wso2carbon.crt
#                                    keytool -import -alias wso2carbon -file wso2carbon.crt -keystore client-truststore.jks
#  4. Generate un protected version of the private key: openssl rsa -in private.key -out private-unlocked.key
#
# If there is no requirement to use password-protected keys:
#  1. Generate the key and certificate: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt \
#                                       -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                                       -extensions v3_req -config <(echo "[req]"; \
#                                       echo "distinguished_name=req"; \
#                                       echo "[v3_req]"; \
#                                       echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment"; \
#                                       echo "extendedKeyUsage=serverAuth,clientAuth"; \
#                                       echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:controlplane.am.wso2.com,DNS:gateway.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com")
#
# Then, base64 encode the content and add it to tls.crt and tls.key:
#  1.  cat certificate.crt | base64 -w 0
#  2.  cat private.key | base64 -w 0
