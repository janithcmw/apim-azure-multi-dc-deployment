apiVersion: v1
kind: Secret
metadata:
  name: {{ template "apim-321-multi-dc-aks.resource.prefix" . }}-certificate-secret
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZIekNDQkFlZ0F3SUJBZ0lVTGR4eWlONGt0ckxEblE3RU9xeEJXYjgwck1rd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2N6RUxNQWtHQTFVRUJoTUNVMHd4R2pBWUJnTlZCQWdNRVZOdmRYUm9aWEp1SUZCeWIzWnBibU5sTVE0dwpEQVlEVlFRSERBVkhZV3hzWlRFTk1Bc0dBMVVFQ2d3RWFtTnRkekVSTUE4R0ExVUVDd3dJYW1OdGR5NWpiMjB4CkZqQVVCZ05WQkFNTURTb3VZVzB1ZDNOdk1pNWpiMjB3SGhjTk1qVXdOekF5TURZMU1qRTNXaGNOTWpZd056QXkKTURZMU1qRTNXakJ6TVFzd0NRWURWUVFHRXdKVFRERWFNQmdHQTFVRUNBd1JVMjkxZEdobGNtNGdVSEp2ZG1sdQpZMlV4RGpBTUJnTlZCQWNNQlVkaGJHeGxNUTB3Q3dZRFZRUUtEQVJxWTIxM01SRXdEd1lEVlFRTERBaHFZMjEzCkxtTnZiVEVXTUJRR0ExVUVBd3dOS2k1aGJTNTNjMjh5TG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFMaWR4MlRLZzMyTm9DOHZkR0Z4UUdDUGtReHlCMkxWWmFKMjREVjJuNVJ2OXkybwpBOWRLTDk2dTdJbGkzYVRMeWpQaE05c280emQ5MHBxNEdsTUs0cnZqS0h2TDBzYnAwZTN1U1JLa1c2SlMxdGxjCkVqVDZjdDV0UGVtaG9WVnU4ZE1OSnFOSlFqRG5kUGlyVEpLK0h4NlJQWXdGR0NRZCtTR2ppZlZod0UyYzFKd1MKWjcxWFF0QlJYcWl5VUk3TFNoV29jSVgzb0lPcno3aHVzN0pQTDFPSEptSnNqZ1dUb1ZyekpndDNDTVJwZkFHUApxR09HMS8yRzhDSE9KUlpURU9sMkhyQU03QWlIU0FCUzNLWGlnM0VvTTNxT1dFa082NXhjZHFaSFVaaG5yVnIwCmJZK2JxOU5xbFZvUklkRzdUK1lyTkNjM3JQMGNwd3ZXYmdTQzZWMENBd0VBQWFPQ0Fha3dnZ0dsTUlJQmRRWUQKVlIwUkJJSUJiRENDQVdpQ0RTb3VZVzB1ZDNOdk1pNWpiMjJDR1dGdVlXeDVkR2xqY3k1a1l6RXVZVzB1ZDNOdgpNaTVqYjIyQ0dXRnVZV3g1ZEdsamN5NWtZekl1WVcwdWQzTnZNaTVqYjIyQ0hHTnZiblJ5YjJ4d2JHRnVaUzVrCll6RXVZVzB1ZDNOdk1pNWpiMjJDSEdOdmJuUnliMnh3YkdGdVpTNWtZekl1WVcwdWQzTnZNaTVqYjIyQ0YyZGgKZEdWM1lYa3VaR014TG1GdExuZHpiekl1WTI5dGdoZG5ZWFJsZDJGNUxtUmpNaTVoYlM1M2MyOHlMbU52YllJYQpkM011WjJGMFpYZGhlUzVrWXpFdVlXMHVkM052TWk1amIyMkNHM2R6Y3k1bllYUmxkMkY1TG1Sak1pNWhiUzUzCmMyOHlMbU52YllJZmRISmhabVpwWXk1dFlXNWhaMlZ5TG1Sak1TNWhiUzUzYzI4eUxtTnZiWUlmZEhKaFptWnAKWXk1dFlXNWhaMlZ5TG1Sak1pNWhiUzUzYzI4eUxtTnZiWUliYTJWNUxtMWhibUZuWlhJdVpHTXhMbUZ0TG5kegpiekl1WTI5dGdodHJaWGt1YldGdVlXZGxjaTVrWXpJdVlXMHVkM052TWk1amIyMHdDd1lEVlIwUEJBUURBZ1R3Ck1CMEdBMVVkRGdRV0JCU2hpa0RNTm4xRU9YUHRJU1puSzBYNUVpSFdmVEFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQVBpQ0p6RXdTdjVscUR3bGpCRG0yUytSUERxU2ZzSElsSDlQSFBuMU9oK3FTVFZTemdTTFFBUzQ2UlErdwpzQndSYmpmTWJ3UXNwdUlqUXhoMWpNa0dwZ0hJTXdFbHNNUW9DejZlcFVlZjF3QWJoQ2V1b1doc2Naa05haStDCkw3RGlmWFF0eEVQQTJMc0R0OGZxbk9Wcm5ZRkMrU0R4QnB3d0dsZTNZNVR3dkFsbEI3b2pYSmhiUzhnRG9FN00KQWZQaHE0aGxRQzBOWkNkaTg0dE9rV2h2MllYaHIyQjl2ZEUwWTM4Y2lWalFnbmpwMFNHbjVoUmh5dTI0REY5Rwo0VTd0QjVUUXdBZTNPS0VFSm1JVGQ5eXNYejZnWi8ySGNtUEdFczBkS3FTekxuamRvTWZFbXhYbnYwNHRxRHJZCktPd3cvRkFRYnlCZStZVTU4LzJvKzNQV2dRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzRuY2RreW9OOWphQXYKTDNSaGNVQmdqNUVNY2dkaTFXV2lkdUExZHArVWIvY3RxQVBYU2kvZXJ1eUpZdDJreThvejRUUGJLT00zZmRLYQp1QnBUQ3VLNzR5aDd5OUxHNmRIdDdra1NwRnVpVXRiWlhCSTArbkxlYlQzcG9hRlZidkhURFNhalNVSXc1M1Q0CnEweVN2aDhla1QyTUJSZ2tIZmtobzRuMVljQk5uTlNjRW1lOVYwTFFVVjZvc2xDT3kwb1ZxSENGOTZDRHE4KzQKYnJPeVR5OVRoeVppYkk0Rms2RmE4eVlMZHdqRWFYd0JqNmhqaHRmOWh2QWh6aVVXVXhEcGRoNndET3dJaDBnQQpVdHlsNG9OeEtETjZqbGhKRHV1Y1hIYW1SMUdZWjYxYTlHMlBtNnZUYXBWYUVTSFJ1MC9tS3pRbk42ejlIS2NMCjFtNEVndWxkQWdNQkFBRUNnZ0VBRjc2TFA2WmdSUXlyRm9hRzlHVnBmMEhYeVA3OWZqT3VEN2cwWEF2MnVGT3kKT2RnTExteG5QYi9Id2wvSjNBRXQ3NEErZUNpSkdNRUJEazh4YTQ3UjNKSjV5WHBNa0xMUUFrY01kTzVZcnNieQp4Ui8zWTRMMnRTN2RzS2ZPSlR2UXRIRlRqOXJEUGFEM1JXaGF2K0RlQmNOdVpBemZydjEvNWxpdlRMVVcwNlJwCkp4Q1BJcTlmQk00Vk9NUmNSY0ZhODE3empNYlZSSjZUaS9WdWIyWmxyZnB1YkRlRDBZOHBMeXJDV2Q2T3U3NU8KeE9vdVJiSFlxdlRpQjZBK29TQmM1Wk5lN0VOT1czR29ta05EVTQ4TWxRNHNYbWN2dlI5d0gxcHZZVFRncFg0Two5bU9vN2VGOVZrUEdsL1RHZ3M1Y1JjYUVYbEI5NmIxNGNVQWcyUWVmRFFLQmdRRGkwWFBsa0NqQU1DVzFBYzZyClU3MTNtV3lvYkszcUZIaXk3dzlhV2FSc0FsRUNLbEY5M3BTQThGMXJaVmw1UHJkUm1XMXV2U0V5V1d0c1Z6aE8Ka2hkeUlLWmlYUUFFNEtFNklRSUo2Qklua1kyeXlwMkxVQzFPeEVEMGc4dWhvdllmUzE1a0JRazVUSUVFcjJXVQpJamZxNmFpTXBudFEzaFpmT0ZycFc5emlZd0tCZ1FEUVhscW5JWWk0M1EvZlF3cDlPbVdxUUdlcnJmR3FMbFRLCkNmRk5PN3B1b1dzMzZSVFYvUzBHaDY2dHVOTzFxTldYNjBkVlVuSno1aFp4ZGtRaG5ST3VaYXZhR1hXYXY4a0UKalB1c3FVVi9NVEE0Y2x4dXNLN3FXN0NFcXBtRU5ucEI5NUxtTzc3bmhseTh6ZXVJSENmS3lYWnBDTDRzMnpsYwpEOWZub2xqeFB3S0JnUUM4NzFvS0xHWTFpU1d2dkZ5cURDd3o5dUl5L2F4MDR5NlRabDAwbHAxR3R6dEJnWHkyClMzVUtYcTZDcWo2NHAweE90VzRabzRPR2pFUFdVR1QvMWVPZjFxQ2lLUE8rSEZ0UXIzUWlTbVRzL3VxNHR0dzYKMHNPYTdCRnJYR21BTDkyeXZiWlh2SFl0ZTVPeEVtV2IybEVYNWlEWFlFb3lWM3p0UG1WRUk1aEFId0tCZ0hZVgpRcUo4YXBMNUZFbWVJSStmVElZVFFhMFZRbU1ESnFIb3lJclFVbkxubjI5cjg1YmhoMmF2OWRvVmFFVUdqU1V1Ci9KbnB3MXJUQmR6Ky9OVmZ3d3VPS3JuS3U4OGE2THhmZVREOExKcE1NZHVMVTc2VytrbHQ5TGI2UjAyWjRlY0kKZW9OblVHUzh6RWxqR1J0bGVWZCtuRkFoMkVScmFESTMrRThZdmZiWkFvR0FGRXR5VHJ4TDZReGRjYU9idHMxNwpqaFVSQ0pncy9mVWpabHdiVWhmQ3FmbklqQlpSaytvbFF6ZGZMMFY5Mnh6bzYxNk1iZmJpSVhhZ09CS0ZzUEFRClZVR21oRFVUUjVYWnNQaU1lcDFHTXBjOFV1ZGVadnVMS0NScFNMYlJaSU01U0xBWXhtcFZhTFhYTVRySmE1ckgKYlpUL0NEMm95OHl1dDQ2MDFlTzlLS3M9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

# For this, you can generate either keys with passwords or without passwords. Having password-protected keys is relevant
# even if we are adding the content of the keys. If password-protected keys are generated need to push the unprotected
# version of the privatekey as follows :
#  1. Generate the key: openssl genpkey -algorithm RSA -out private.key -aes256 -pkeyopt rsa_keygen_bits:2048
#  2. Generate the certificate: openssl req -x509 -days 365 -key private.key -out certificate.crt \
#                               -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                               -extensions v3_req -config <(echo "[req]"; \
#                               echo distinguished_name=req; \
#                               echo "[v3_req]"; \
#                               echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:controlplane.am.wso2.com,DNS:gateway.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com"; \
#                               echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment")
#  3. Generate keystore if required: openssl pkcs12 -export -in certificate.crt -inkey private.key -out keystore.p12 -name wso2carbon
#                                    keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore wso2carbon.jks -deststoretype JKS
#                                    keytool -export -keystore wso2carbon.jks -alias wso2carbon -file wso2carbon.crt
#                                    keytool -import -alias wso2carbon -file wso2carbon.crt -keystore client-truststore.jks
#  4. Generate un protected version of the private key: openssl rsa -in private.key -out private-unlocked.key
#
# If there is no requirement to use password-protected keys:
#  1. Generate the key and certificate: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt \
#                                       -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                                       -extensions v3_req -config <(echo "[req]"; \
#                                       echo "distinguished_name=req"; \
#                                       echo "[v3_req]"; \
#                                       echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment"; \
#                                       echo "extendedKeyUsage=serverAuth,clientAuth"; \
#                                       echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:controlplane.am.wso2.com,DNS:gateway.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com")
#
# Then, base64 encode the content and add it to tls.crt and tls.key:
#  1.  cat certificate.crt | base64 -w 0
#  2.  cat private.key | base64 -w 0
