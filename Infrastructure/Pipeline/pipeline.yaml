# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  # terraform backend
  terraformstoragerg: 'rg-cst-api-app'
  terraformstorageaccount: 'tfstatestoragecst'
  subscription_id: <sub-id>

  # variables of the test execution VMs.
  sharedSubscription: <shared_sub-id>
  sharedResourceGroup: <shared_resource-group>
  sharedVnet: <shared_vnet>

# Define resources.
resources:
  repositories:
    - repository: apim-azure-multi-dc-deployment
      type: github
      endpoint: azure-multi-dc-deployment
      name: janithcmw/apim-azure-multi-dc-deployment
      ref: refs/heads/localRun

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Infrastructure_Provisioning
    jobs:
      - job: Provision_Infrastructure
        displayName: Infrastructure Provisioning
        steps:
          - script: echo Starting Azure Multi DC Pipeline!!!
            displayName: 'Beginning'
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform 1.12.2'
            inputs:
              terraformVersion: 1.12.2

          - checkout: apim-azure-multi-dc-deployment
            path: s/apim-azure-multi-dc-deployment

          - script: |
              # handle the tf scripts.
              mkdir -p "$(Agent.BuildDirectory)/s/azure-build-tf"
              cp -r "$(Agent.BuildDirectory)/s/apim-azure-multi-dc-deployment/Infrastructure/Terraform/." "$(Agent.BuildDirectory)/s/azure-build-tf/"
              echo "Existing files in the Terraform build location." && ls "$(Agent.BuildDirectory)/s/azure-build-tf/"
              
              # handle the helm scripts.
              mkdir -p "$(Agent.BuildDirectory)/s/helm-deployment-build"
              cp -r "$(Agent.BuildDirectory)/s/apim-azure-multi-dc-deployment/Deployment/." "$(Agent.BuildDirectory)/s/helm-deployment-build/"
              echo "Existing files in the Helm build location." && ls "$(Agent.BuildDirectory)/s/helm-deployment-build/"
              
              # handle the env specific scripts.
              mkdir -p "$(Agent.BuildDirectory)/s/env-scripts"
              cp -r "$(Agent.BuildDirectory)/s/apim-azure-multi-dc-deployment/Deployment/Deploy-Scripts/." "$(Agent.BuildDirectory)/s/env-scripts/"
              echo "Existing files in the script location." && ls "$(Agent.BuildDirectory)/s/env-scripts/"
            displayName: 'Handle terraform scripts | helm artefacts | env specific Env.'

          - task: TerraformTaskV2@2
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(Agent.BuildDirectory)/s/azure-build-tf/'
              commandOptions: '-upgrade'
              backendServiceArm: 'Infrastructure Provisioning Service Connection'
              backendAzureRmResourceGroupName: '$(terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
              backendAzureRmContainerName: 'test-terraform-storage'
              backendAzureRmKey: '.terraform/terraform.tfstate'

          - task: TerraformTaskV2@2
            displayName: 'Terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(Agent.BuildDirectory)/s/azure-build-tf/'
              commandOptions: >
                -var="subscription_id=$(subscription_id)"
                -var="subscription_id_shared=$(sharedSubscription)"
                -var="resource_group_name_shared=$(sharedResourceGroup)"
                -var="vnet_name_shared=$(sharedVnet)"
              environmentServiceNameAzureRM: 'Infrastructure Provisioning Service Connection'

          - task: TerraformTaskV2@2
            displayName: 'Terraform apply -auto-approve'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(Agent.BuildDirectory)/s/azure-build-tf/'
              commandOptions: >
                -auto-approve
                -var="subscription_id=$(subscription_id)"
                -var="subscription_id_shared=$(sharedSubscription)"
                -var="resource_group_name_shared=$(sharedResourceGroup)"
                -var="vnet_name_shared=$(sharedVnet)"
              environmentServiceNameAzureRM: 'Infrastructure Provisioning Service Connection'

          - task: AzureCLI@2
            displayName: Execute Pre Helm commands.
            inputs:
              azureSubscription: 'Infrastructure Provisioning Service Connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Agent.BuildDirectory)/s/env-scripts/pre-deploy.sh'
              workingDirectory: '$(Agent.BuildDirectory)/s/helm-deployment-build/'
            env:
              subscription_id: $(subscription_id)
              subscription_id_shared: $(sharedVnet)
          
          - task: AzureCLI@2
            displayName: Deploy Helm resources.
            inputs:
              azureSubscription: 'Infrastructure Provisioning Service Connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Agent.BuildDirectory)/s/env-scripts/helm-deploy.sh'
              workingDirectory: '$(Agent.BuildDirectory)/s/helm-deployment-build/'